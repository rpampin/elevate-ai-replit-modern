# Get all secrets from kv-care-portal-local in caredx.onmicrosoft.com
# Uses Azure CLI and updates Visual Studio User Secrets for CarePortal.WebApi

# Login to specific tenant
az login --tenant "caredx.onmicrosoft.com" | Out-Null

# Get all secret names
$secrets = az keyvault secret list --vault-name "kv-care-portal-local" --query "[].name" -o tsv

# Create hashtable to store secrets
$secretData = @{}

Write-Host "=== RETRIEVING CARE PORTAL SECRETS ===" -ForegroundColor Green

# Loop through each secret and add to hashtable
foreach ($secretName in $secrets) {
    $secretValue = az keyvault secret show --name $secretName --vault-name "kv-care-portal-local" --query "value" -o tsv
    $displayName = $secretName -replace '--', ':'
    $secretData[$displayName] = $secretValue
    Write-Host "Retrieved: $displayName" -ForegroundColor Cyan
}

# Convert to JSON with proper formatting
$jsonOutput = $secretData | ConvertTo-Json -Depth 3

# Find the project file to get the UserSecretsId
$webApiPath = Join-Path $PSScriptRoot "CarePortal.WebApi"
$projectFile = Join-Path $webApiPath "CarePortal.WebApi.csproj"

if (Test-Path $projectFile) {
    # Read the project file to find UserSecretsId
    [xml]$projectXml = Get-Content $projectFile
    $userSecretsId = $projectXml.Project.PropertyGroup.UserSecretsId
    
    if ($userSecretsId) {
        # Path to user secrets folder
        $userSecretsPath = Join-Path $env:APPDATA "Microsoft\UserSecrets\$userSecretsId"
        $secretsFilePath = Join-Path $userSecretsPath "secrets.json"
        
        # Ensure the directory exists
        if (!(Test-Path $userSecretsPath)) {
            New-Item -ItemType Directory -Path $userSecretsPath -Force | Out-Null
        }
        
        # Create or update the secrets.json file
        $jsonOutput | Out-File -FilePath $secretsFilePath -Encoding UTF8
        
        Write-Host ""
        Write-Host "=== USER SECRETS UPDATED ===" -ForegroundColor Green
        Write-Host "Project: CarePortal.WebApi" -ForegroundColor Yellow
        Write-Host "UserSecretsId: $userSecretsId" -ForegroundColor Yellow
        Write-Host "File: $secretsFilePath" -ForegroundColor Yellow
        Write-Host "Secrets count: $($secretData.Count)" -ForegroundColor Yellow
    } else {
        Write-Host ""
        Write-Host "=== ERROR ===" -ForegroundColor Red
        Write-Host "UserSecretsId not found in project file. Make sure you've initialized User Secrets in Visual Studio." -ForegroundColor Red
        Write-Host "Right-click project -> Manage User Secrets to initialize." -ForegroundColor Yellow
    }
} else {
    Write-Host ""
    Write-Host "=== ERROR ===" -ForegroundColor Red
    Write-Host "Project file not found: $projectFile" -ForegroundColor Red
    Write-Host "Make sure you're running this from the solution root." -ForegroundColor Yellow
}=== ERROR ===" -ForegroundColor Red
    Write-Host "CarePortal.WebApi folder not found at: $webApiPath" -ForegroundColor Red
    Write-Host "Current directory: $PSScriptRoot" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "JSON output:" -ForegroundColor Cyan
    Write-Output $jsonOutput
}